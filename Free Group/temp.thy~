theory temp
imports "NielsonSchreier"
begin

lemma span_subset:
  assumes "A \<subseteq> B"
  shows "\<langle>A\<rangle>\<^bsub>H\<^esub> \<subseteq> \<langle>B\<rangle>\<^bsub>H\<^esub>"
  using assms gen_span.gen_gens subset_iff subset_span by metis

lemma one_SG:  "\<one>\<^bsub>H\<^esub> = \<one>\<^bsub>SG H K\<^esub>"
  unfolding SG_def by simp

lemma mult_SG: "x \<otimes>\<^bsub>H\<^esub> y = x \<otimes>\<^bsub>SG H K\<^esub> y"
  by (simp add: SG_def)

lemma inv_SG: "group H \<Longrightarrow> y \<in> K \<Longrightarrow> subgroup K H \<Longrightarrow> inv\<^bsub>H\<^esub> y = inv\<^bsub>SG H K\<^esub> y"
  unfolding SG_def by (simp add: group.m_inv_consistent)

lemma assumes "A \<subseteq> K" and "subgroup K H" and "group H"
  shows "x \<in> \<langle>A\<rangle>\<^bsub>H\<^esub> \<Longrightarrow> x \<in> \<langle>A\<rangle>\<^bsub>SG H K\<^esub>"
proof(induction rule: gen_span.induct)
case gen_one
  then show ?case  by (metis gen_span.gen_one one_SG)
next
  case (gen_gens x)
  then show ?case by (simp add: gen_span.gen_gens)
next
  case (gen_inv x)
  then show ?case sorry
next
  case (gen_mult x y)
  then show ?case by (metis gen_span.gen_mult mult_SG)
qed

lemma
  assumes "(y,x) \<in> lex_L2_word A"
      and "(x \<otimes>\<^bsub>SG F\<^bsub>A\<^esub> H\<^esub> y, x) \<in> lex_L2_word A"
      and "x \<in> H"
      and "y \<in> H"
      and "H \<le> F\<^bsub>A\<^esub>"
    shows "x \<notin> X (SG (F\<^bsub>A\<^esub>) H) A"
proof-
  have "x \<otimes>\<^bsub>SG F\<^bsub>A\<^esub> H\<^esub> y \<in> H" by (metis assms(3) assms(4) assms(5) mult_SG subgroup_def)
  then have "{y, x \<otimes>\<^bsub>SG F\<^bsub>A\<^esub> H\<^esub> y} \<subseteq> {h \<in> H. (h,x) \<in> (lex_L2_word A)}" using assms(1) assms(2) assms(4) by auto
  moreover have "H = carrier (SG F\<^bsub>A\<^esub> H)" unfolding SG_def by simp
  ultimately have 1:"\<langle>{y, x \<otimes>\<^bsub>SG F\<^bsub>A\<^esub> H\<^esub> y}\<rangle>\<^bsub>SG F\<^bsub>A\<^esub> H\<^esub> \<subseteq> G (SG (F\<^bsub>A\<^esub>) H) A x" unfolding G_def using span_subset by (metis (no_types, lifting) Collect_cong)
  have "inv \<^bsub>SG F\<^bsub>A\<^esub> H\<^esub> y \<in> \<langle>{y, x \<otimes>\<^bsub>SG F\<^bsub>A\<^esub> H\<^esub> y}\<rangle>\<^bsub>SG F\<^bsub>A\<^esub> H\<^esub>" by (simp add: gen_span.gen_gens gen_span.gen_inv)
  moreover have "x \<otimes>\<^bsub>SG F\<^bsub>A\<^esub> H\<^esub> y \<in> \<langle>{y, x \<otimes>\<^bsub>SG F\<^bsub>A\<^esub> H\<^esub> y}\<rangle>\<^bsub>SG F\<^bsub>A\<^esub> H\<^esub>" by (simp add: gen_span.gen_gens)
  ultimately have "x \<otimes>\<^bsub>SG F\<^bsub>A\<^esub> H\<^esub> y \<otimes>\<^bsub>SG F\<^bsub>A\<^esub> H\<^esub> inv \<^bsub>SG F\<^bsub>A\<^esub> H\<^esub> y \<in> \<langle>{y, x \<otimes>\<^bsub>SG F\<^bsub>A\<^esub> H\<^esub> y}\<rangle>\<^bsub>SG F\<^bsub>A\<^esub> H\<^esub>" by (simp add: gen_span.gen_mult)
  then have "x \<in> \<langle>{y, x \<otimes>\<^bsub>SG F\<^bsub>A\<^esub> H\<^esub> y}\<rangle>\<^bsub>SG F\<^bsub>A\<^esub> H\<^esub>" sorry
end